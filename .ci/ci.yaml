jobs:
- job: linux
  strategy:
    matrix:
      # I literally cannot believe that Azure Pipelines does not support
      # multiple axis builds.
#      cp36-manylinux_x86_64:
#        CIBW_BUILD: cp36-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      cp37-manylinux_x86_64:
#        CIBW_BUILD: cp37-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      cp38-manylinux_x86_64:
#        CIBW_BUILD: cp38-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      cp39-manylinux_x86_64:
#        CIBW_BUILD: cp39-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      cp310-manylinux_x86_64:
#        CIBW_BUILD: cp310-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      cp311-manylinux_x86_64:
#        CIBW_BUILD: cp311-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      pp37-manylinux_x86_64:
#        CIBW_BUILD: pp37-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      pp38_manylinux_x86_64:
#        CIBW_BUILD: pp38-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh
#      pp39_manylinux_x86_64:
#        CIBW_BUILD: pp39-manylinux_x86_64
#        BUILD_SCRIPT: build_mlpack.sh

      cp36-manylinux_i686:
        CIBW_BUILD: cp36-manylinux_i686
        BUILD_SCRIPT: build_mlpack.i686.sh
#      cp37-manylinux_i686:
#        CIBW_BUILD: cp37-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      cp38-manylinux_i686:
#        CIBW_BUILD: cp38-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      cp39-manylinux_i686:
#        CIBW_BUILD: cp39-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      cp310-manylinux_i686:
#        CIBW_BUILD: cp310-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      cp311-manylinux_i686:
#        CIBW_BUILD: cp311-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      pp37-manylinux_i686:
#        CIBW_BUILD: pp37-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      pp38_manylinux_i686:
#        CIBW_BUILD: pp38-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh
#      pp39_manylinux_i686:
#        CIBW_BUILD: pp39-manylinux_i686
#        BUILD_SCRIPT: build_mlpack.i686.sh

#      cp36-musllinux_x86_64:
#        CIBW_BUILD: cp36-musllinux_x86_64
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp37-musllinux_x86_64:
#        CIBW_BUILD: cp37-musllinux_x86_64
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp38-musllinux_x86_64:
#        CIBW_BUILD: cp38-musllinux_x86_64
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp39-musllinux_x86_64:
#        CIBW_BUILD: cp39-musllinux_x86_64
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp310-musllinux_x86_64:
#        CIBW_BUILD: cp310-musllinux_x86_64
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp311-musllinux_x86_64:
#        CIBW_BUILD: cp311-musllinux_x86_64
#        BUILD_SCRIPT: build_mlpack.musl.sh
#
#      cp36-musllinux_i686:
#        CIBW_BUILD: cp36-musllinux_i686
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp37-musllinux_i686:
#        CIBW_BUILD: cp37-musllinux_i686
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp38-musllinux_i686:
#        CIBW_BUILD: cp38-musllinux_i686
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp39-musllinux_i686:
#        CIBW_BUILD: cp39-musllinux_i686
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp310-musllinux_i686:
#        CIBW_BUILD: cp310-musllinux_i686
#        BUILD_SCRIPT: build_mlpack.musl.sh
#      cp311-musllinux_i686:
#        CIBW_BUILD: cp311-musllinux_i686
#        BUILD_SCRIPT: build_mlpack.musl.sh

  timeoutInMinutes: 0 # No limit for build time.
  pool: {vmImage: 'Ubuntu-20.04'}
  variables:
    MLPACK_VERSION: 4.0.0
    CIBW_TEST_COMMAND: python -c 'import mlpack; import numpy as np; x = np.random.rand(100, 10); o = mlpack.pca(input_=x, new_dimensionality=5, verbose=True)'
    # The PYPI_TOKEN variable is automatically set by Azure Pipelines.
    TWINE_PYPI_TOKEN: $(PYPI_TOKEN)
  steps:
    - task: UsePythonVersion@0
    - bash: |
        set -o errexit
        python3 -m pip install --upgrade pip
        pip3 install cibuildwheel cython numpy pandas setuptools twine
        sudo apt-get update
        sudo apt-get install libarmadillo-dev libcereal-dev g++ cmake libensmallen-dev
      displayName: Install dependencies

    - bash: |
        git clone https://github.com/mlpack/mlpack
        cd mlpack
        git checkout $(MLPACK_VERSION)
      displayName: Clone mlpack

    - bash: |
        mkdir -p mlpack/build
        cd mlpack/build
        cmake -DBUILD_PYTHON_BINDINGS=ON ../
        make python_configured
      displayName: Generate setup.py

    - bash: |
        export CIBW_BEFORE_BUILD="./$(BUILD_SCRIPT)"
        cibuildwheel --output-dir wheelhouse mlpack/build/src/mlpack/bindings/python/
      displayName: Build wheels

    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}

#    - bash: |
#        echo "[pypi]" > ~/.pypirc
#        echo "username = __token__" >> ~/.pypirc
#        echo "password = $(TWINE_PYPI_TOKEN)" >> ~/.pypirc
#        twine upload wheelhouse/*.whl
#        rm -f ~/.pypirc
#      displayName: Push wheels to PyPI

- job: macos
  strategy:
    matrix:
      cp36-macosx_x86_64:
        CIBW_BUILD: cp36-macosx_x86_64
        BUILD_SCRIPT: build_mlpack.osx.sh
#      cp37-macosx_x86_64:
#        CIBW_BUILD: cp37-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      cp38-macosx_x86_64:
#        CIBW_BUILD: cp38-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      cp38-macosx_arm64:
#        CIBW_BUILD: cp38-macosx_arm64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#        CIBW_ARCHS_MACOS: "arm64"
#      cp39-macosx_x86_64:
#        CIBW_BUILD: cp39-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      cp39-macosx_arm64:
#        CIBW_BUILD: cp39-macosx_arm64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#        CIBW_ARCHS_MACOS: "arm64"
#      cp310-macosx_x86_64:
#        CIBW_BUILD: cp310-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      cp310-macosx_arm64:
#        CIBW_BUILD: cp310-macosx_arm64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#        CIBW_ARCHS_MACOS: "arm64"
#      cp311-macosx_x86_64:
#        CIBW_BUILD: cp311-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      cp311-macosx_arm64:
#        CIBW_BUILD: cp311-macosx_arm64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#        CIBW_ARCHS_MACOS: "arm64"
#      pp37-macosx_x86_64:
#        CIBW_BUILD: pp37-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      pp38-macosx_x86_64:
#        CIBW_BUILD: pp38-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh
#      pp39-macosx_x86_64:
#        CIBW_BUILD: pp39-macosx_x86_64
#        BUILD_SCRIPT: build_mlpack.osx.sh

  timeoutInMinutes: 0 # No limit for build time.
  pool: {vmImage: 'macOS-11'}
  variables:
    MLPACK_VERSION: 4.0.0
    CIBW_TEST_COMMAND: python -c 'import mlpack; import numpy as np; x = np.random.rand(100, 10); o = mlpack.pca(input_=x, new_dimensionality=5, verbose=True)'
    # The PYPI_TOKEN variable is automatically set by Azure Pipelines.
    TWINE_PYPI_TOKEN: $(PYPI_TOKEN)
  steps:
    - task: UsePythonVersion@0
    - bash: |
        set -o errexit
        python3 -m pip install --upgrade pip
        pip3 install cibuildwheel cython numpy pandas setuptools twine
        brew install --force armadillo cereal gcc cmake ensmallen
      displayName: Install dependencies

    - bash: |
        git clone https://github.com/mlpack/mlpack
        cd mlpack
        git checkout $(MLPACK_VERSION)
      displayName: Clone mlpack

    - bash: |
        mkdir -p mlpack/build
        cd mlpack/build
        cmake -DBUILD_PYTHON_BINDINGS=ON ../
        make python_configured
      displayName: Generate setup.py

    - bash: |
        brew uninstall --force armadillo cereal ensmallen arpack hdf5 open-mpi openblas r superlu cmake gcc
      displayName: Remove dependencies before entering build environment

    - bash: |
        export CIBW_BEFORE_BUILD="./$(BUILD_SCRIPT)"
        cibuildwheel --output-dir wheelhouse mlpack/build/src/mlpack/bindings/python/
      displayName: Build wheels

    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}

    - bash: |
        echo "[pypi]" > ~/.pypirc
        echo "username = __token__" >> ~/.pypirc
        echo "password = $(TWINE_PYPI_TOKEN)" >> ~/.pypirc
        twine upload wheelhouse/*.whl
        rm -f ~/.pypirc
      displayName: Push wheels to PyPI

- job: windows
  strategy:
    matrix:
      cp36-win_amd64:
        CIBW_BUILD: cp36-win_amd64
        BUILD_SCRIPT: build_mlpack.bat
#      cp36-win32:
#        CIBW_BUILD: cp36-win32
#        BUILD_SCRIPT: build_mlpack.bat
#      cp37-win_amd64:
#        CIBW_BUILD: cp37-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      cp37-win32:
#        CIBW_BUILD: cp37-win32
#        BUILD_SCRIPT: build_mlpack.bat
#      cp38-win_amd64:
#        CIBW_BUILD: cp38-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      cp38-win32:
#        CIBW_BUILD: cp38-win32
#        BUILD_SCRIPT: build_mlpack.bat
#      cp39-win_amd64:
#        CIBW_BUILD: cp39-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      cp39-win32:
#        CIBW_BUILD: cp39-win32
#        BUILD_SCRIPT: build_mlpack.bat
#      cp39-win_arm64:
#        CIBW_BUILD: cp39-win_arm64
#        BUILD_SCRIPT: build_mlpack.bat
#        CIBW_ARCHS_WINDOWS: "ARM64"
#      cp310-win_amd64:
#        CIBW_BUILD: cp310-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      cp310-win32:
#        CIBW_BUILD: cp310-win32
#        BUILD_SCRIPT: build_mlpack.bat
#      cp310-win_arm64:
#        CIBW_BUILD: cp310-win_arm64
#        BUILD_SCRIPT: build_mlpack.bat
#        CIBW_ARCHS_WINDOWS: "ARM64"
#      cp311-win_amd64:
#        CIBW_BUILD: cp311-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      cp311-win32:
#        CIBW_BUILD: cp311-win32
#        BUILD_SCRIPT: build_mlpack.bat
#      cp311-win_arm64:
#        CIBW_BUILD: cp311-win_arm64
#        BUILD_SCRIPT: build_mlpack.bat
#        CIBW_ARCHS_WINDOWS: "ARM64"
#      pp37-win_amd64:
#        CIBW_BUILD: pp37-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      pp38-win_amd64:
#        CIBW_BUILD: pp38-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat
#      pp39-win_amd64:
#        CIBW_BUILD: pp39-win_amd64
#        BUILD_SCRIPT: build_mlpack.bat

  timeoutInMinutes: 0 # No limit for build time.
  pool: {vmImage: 'windows-2019'}
  variables:
    MLPACK_VERSION: 4.0.0
    CIBW_TEST_COMMAND: python -c 'import mlpack; import numpy as np; x = np.random.rand(100, 10); o = mlpack.pca(input_=x, new_dimensionality=5, verbose=True)'
    # The PYPI_TOKEN variable is automatically set by Azure Pipelines.
    TWINE_PYPI_TOKEN: $(PYPI_TOKEN)
  steps:
    - task: UsePythonVersion@0
    - bash: |
        set -o errexit
        python3 -m pip install --upgrade pip
        pip3 install cibuildwheel cython numpy pandas setuptools twine
      displayName: Install Python dependencies

    - bash: |
        curl -O -L https://github.com/xianyi/OpenBLAS/releases/download/v0.3.21/OpenBLAS-0.3.21-x64.zip
        mkdir OpenBLAS-0.3.21/
        cd OpenBLAS-0.3.21/
        unzip ../OpenBLAS-0.3.21-x64.zip
      displayName: 'Download OpenBLAS'

    # Configure armadillo
    - bash: |
        curl -O -L https://files.mlpack.org/armadillo-11.4.1.tar.gz
        tar -xvzf armadillo-11.4.1.tar.gz
      displayName: 'Download Armadillo'

    - powershell: |
        $rootdir = $pwd
        cd armadillo-11.4.1/
        cmake -G "Visual Studio 16 2019" `
            -DBLAS_LIBRARY:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
            -DLAPACK_LIBRARY:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
            -DBUILD_SHARED_LIBS=OFF `
            -DCMAKE_BUILD_TYPE=Release .
        cmake --build . --target armadillo --config Release
        cd ../
      displayName: 'Configure and build armadillo'

    # Download ensmallen
    - bash: |
        curl -O -L https://www.ensmallen.org/files/ensmallen-2.19.0.tar.gz
        tar -xvzf ensmallen-2.19.0.tar.gz
        # No build needed---it's header-only.
      displayName: 'Download ensmallen'

    - bash: |
        curl -O -L https://github.com/USCILab/cereal/archive/refs/tags/v1.3.2.tar.gz
        tar -xvzf v1.3.2.tar.gz
      displayName: 'Download cereal'

    - bash: |
        git clone https://github.com/mlpack/mlpack
        cd mlpack
        git checkout $(MLPACK_VERSION)
      displayName: Clone mlpack

    - powershell: |
        $rootdir = $pwd
        cd mlpack
        mkdir build
        cd build
        cmake -G "Visual Studio 16 2019" `
            -DBLAS_LIBRARIES:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
            -DLAPACK_LIBRARIES:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
            -DARMADILLO_INCLUDE_DIR="$rootdir\armadillo-11.4.1\tmp\include" `
            -DARMADILLO_LIBRARY="$rootdir\armadillo-11.4.1\Release\armadillo.lib" `
            -DCEREAL_INCLUDE_DIR="$rootdir\cereal-1.3.2\include" `
            -DENSMALLEN_INCLUDE_DIR="$rootdir\ensmallen-2.19.0\include\" `
            -DBUILD_JULIA_BINDINGS=OFF `
            -DBUILD_PYTHON_BINDINGS=ON `
            -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --target python_configured --config Release
      displayName: Generate setup.py

    - bash: |
        export CIBW_BEFORE_BUILD="$(BUILD_SCRIPT)"
        cibuildwheel --output-dir wheelhouse mlpack/build/src/mlpack/bindings/python/
      displayName: Build wheels

    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}

    - bash: |
        echo "[pypi]" > ~/.pypirc
        echo "username = __token__" >> ~/.pypirc
        echo "password = $(TWINE_PYPI_TOKEN)" >> ~/.pypirc
        twine upload wheelhouse/*.whl
        rm -f ~/.pypirc
      displayName: Push wheels to PyPI
