steps:
  - task: UsePythonVersion@0
  - bash: |
      set -o errexit
      python3 -m pip install --upgrade pip
      pip3 install cibuildwheel cython numpy pandas setuptools twine
    displayName: Install Python dependencies

  - bash: |
      curl -O -L https://github.com/xianyi/OpenBLAS/releases/download/v0.3.21/OpenBLAS-0.3.21-x86.zip
      mkdir OpenBLAS-0.3.21/
      cd OpenBLAS-0.3.21/
      unzip ../OpenBLAS-0.3.21-x86.zip
    displayName: 'Download OpenBLAS'

  # Configure armadillo
  - bash: |
      curl -O -L https://files.mlpack.org/armadillo-11.4.1.tar.gz
      tar -xvzf armadillo-11.4.1.tar.gz
    displayName: 'Download Armadillo'

  - powershell: |
      $rootdir = $pwd
      cd armadillo-11.4.1/
      cmake -G "Visual Studio 16 2019" `
          -A $env:WIN_ARCH `
          -DBLAS_LIBRARY:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
          -DLAPACK_LIBRARY:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
          -DBUILD_SHARED_LIBS=OFF `
          -DCMAKE_BUILD_TYPE=Release .
      cmake --build . --target armadillo --config Release
      cd ../
    displayName: 'Configure and build armadillo'

  # Download ensmallen
  - bash: |
      curl -O -L https://www.ensmallen.org/files/ensmallen-2.19.0.tar.gz
      tar -xvzf ensmallen-2.19.0.tar.gz
      # No build needed---it's header-only.
    displayName: 'Download ensmallen'

  - bash: |
      curl -O -L https://github.com/USCILab/cereal/archive/refs/tags/v1.3.2.tar.gz
      tar -xvzf v1.3.2.tar.gz
    displayName: 'Download cereal'

  - bash: |
      git clone https://github.com/mlpack/mlpack
      cd mlpack
      git checkout $(MLPACK_VERSION)
    displayName: Clone mlpack

  - powershell: |
      $rootdir = $pwd
      cd mlpack
      mkdir build
      cd build
      cmake -G "Visual Studio 16 2019" `
          -DBLAS_LIBRARIES:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
          -DLAPACK_LIBRARIES:FILEPATH="$rootdir\OpenBLAS-0.3.21\lib\libopenblas.lib" `
          -DARMADILLO_INCLUDE_DIR="$rootdir\armadillo-11.4.1\tmp\include" `
          -DARMADILLO_LIBRARY="$rootdir\armadillo-11.4.1\Release\armadillo.lib" `
          -DCEREAL_INCLUDE_DIR="$rootdir\cereal-1.3.2\include" `
          -DENSMALLEN_INCLUDE_DIR="$rootdir\ensmallen-2.19.0\include\" `
          -DBUILD_JULIA_BINDINGS=OFF `
          -DBUILD_PYTHON_BINDINGS=ON `
          -DCMAKE_BUILD_TYPE=Release ..
      cmake --build . --target python_configured --config Release
    displayName: Generate setup.py

  - powershell: |
      $env:CIBW_REPAIR_WHEEL_COMMAND_WINDOWS = "delvewheel repair --add-path $pwd/OpenBLAS-0.3.21/bin/ -w {dest_dir} {wheel}"
      $env:CIBW_BEFORE_BUILD = $env:BUILD_SCRIPT
      $env:CIBW_BUILD_VERBOSITY = 1
      cibuildwheel --output-dir wheelhouse mlpack/build/src/mlpack/bindings/python/
    displayName: Build wheels

  - task: PublishBuildArtifacts@1
    inputs: {pathtoPublish: 'wheelhouse'}

  - bash: |
      echo "[pypi]" > ~/.pypirc
      echo "username = __token__" >> ~/.pypirc
      echo "password = $(TWINE_PYPI_TOKEN)" >> ~/.pypirc
      twine upload wheelhouse/*.whl
      rm -f ~/.pypirc
    displayName: Push wheels to PyPI
