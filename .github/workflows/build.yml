name: Build aarch64, s390x, and ppc64le wheels

on: [push]

env:
  MLPACK_COMMIT: 4.0.0
  CIBW_TEST_COMMAND: python -c 'import mlpack; import numpy as np; x = np.random.rand(100, 10); o = mlpack.pca(input_=x, new_dimensionality=5, verbose=True)'
  CIBW_BEFORE_BUILD: "./build_mlpack.emulated.sh"

jobs:
  linux_build_wheels:
    name: Build wheel for ${{ matrix.py_ver }}-${{ matrix.host }}_${{ matrix.arch }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
#        py_ver: [cp36, cp37, cp38, cp39, cp310, cp311, pp37, pp38, pp39]
        py_ver: [cp311]
        arch: [aarch64, s390x, ppc64le]
        host: [manylinux, musllinux]
        exclude:
          - py_ver: pp37
            arch: s390x
          - py_ver: pp38
            arch: s390x
          - py_ver: pp39
            arch: s390x
          - py_ver: pp37
            arch: ppc64le
          - py_ver: pp38
            arch: ppc64le
          - py_ver: pp39
            arch: ppc64le
          - py_ver: pp37
            host: musllinux
          - py_ver: pp38
            host: musllinux
          - py_ver: pp39
            host: musllinux

    env:
      CIBW_BUILD: ${{ matrix.py_ver }}-${{ matrix.host }}_${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install dependencies
        run: |
          sudo apt-get install libopenblas-dev libarmadillo-dev libensmallen-dev libcereal-dev g++ cmake
          sudo pip install numpy cython pandas

      - name: Generate setup.py
        run: |
          git clone https://github.com/mlpack/mlpack
          cd mlpack/
          git checkout $MLPACK_COMMIT
          mkdir build/
          cd build/
          cmake -DBUILD_PYTHON_BINDINGS=ON ../
          make python_configured

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.11.2
        with:
          package-dir: mlpack/build/src/mlpack/bindings/python/
        env:
          CIBW_ARCHS_LINUX: "${{ matrix.arch }}"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  windows_arm_build_wheels:
    name: Build wheel for ${{ matrix.py_ver }}-win_arm64
    runs-on: windows-latest
    strategy:
      matrix:
        py_ver: [cp311]

    env:
      CIBW_BUILD: ${{ matrix.py_ver }}-win_arm64

    steps:
      - uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2

      - name: Build OpenBLAS
        shell: bash
        run: |
          ls C:/msys64/
          ls C:/msys64/mingw64/
          ls C:/msys64/mingw64/bin

          C:\msys64\usr\bin\wget.exe https://github.com/xianyi/OpenBLAS/archive/refs/tags/v0.3.21.zip
          unzip v0.3.21.zip
          cd OpenBLAS-0.3.21/
          mkdir build/
          cd build/

          cmake -G Ninja \
            -DCMAKE_C_COMPILER="C:/msys64/mingw32/bin/clang.exe" \
            -DDYNAMIC_ARCH=0 \
            -DTARGET=ARMV8 \
            -DARCH=arm64 \
            -DBINARY=64 \
            -DUSE_OPENMP=0 \
            -DCMAKE_SYSTEM_PROCESSOR=ARM64 \
            -DCMAKE_CROSSCOMPILING=1 \
            -DCMAKE_SYSTEM_NAME=Windows \
            ..

          cmake --build . --config Release
          ls

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.11.2
        with:
          package-dir: mlpack/build/src/mlpack/bindings/python/
        env:
          CIBW_ARCHS_WINDOWS: "ARM64"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
