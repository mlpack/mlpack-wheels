name: Build aarch64, s390x, and ppc64le wheels

on: [push]

env:
  MLPACK_COMMIT: 4.0.0
  CIBW_TEST_COMMAND: python -c 'import mlpack; import numpy as np; x = np.random.rand(100, 10); o = mlpack.pca(input_=x, new_dimensionality=5, verbose=True)'

jobs:
  linux_build_wheels:
    name: Build wheel for ${{ matrix.py_ver }}-${{ matrix.host }}_${{ matrix.arch }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
#        py_ver: [cp36, cp37, cp38, cp39, cp310, cp311, pp37, pp38, pp39]
        py_ver: [cp311]
        # numpy does not build for s390x: "error: 'HWCAP_S390_VX' undeclared".
        arch: [aarch64, ppc64le]
        host: [manylinux, musllinux]
        exclude:
          - py_ver: pp37
            arch: s390x
          - py_ver: pp38
            arch: s390x
          - py_ver: pp39
            arch: s390x
          - py_ver: pp37
            arch: ppc64le
          - py_ver: pp38
            arch: ppc64le
          - py_ver: pp39
            arch: ppc64le
          - py_ver: pp37
            host: musllinux
          - py_ver: pp38
            host: musllinux
          - py_ver: pp39
            host: musllinux

    env:
      CIBW_BUILD: ${{ matrix.py_ver }}-${{ matrix.host }}_${{ matrix.arch }}
      CIBW_BEFORE_BUILD: "${{ matrix.host == 'manylinux' && './build_mlpack.emulated.sh' || './build_mlpack.musl.sh' }}"

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install dependencies
        run: |
          sudo apt-get install libopenblas-dev libarmadillo-dev libensmallen-dev libcereal-dev g++ cmake
          sudo pip install numpy cython pandas

      - name: Generate setup.py
        run: |
          git clone https://github.com/mlpack/mlpack
          cd mlpack/
          git checkout $MLPACK_COMMIT
          mkdir build/
          cd build/
          cmake -DBUILD_PYTHON_BINDINGS=ON ../
          make python_configured

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.11.2
        with:
          package-dir: mlpack/build/src/mlpack/bindings/python/
        env:
          CIBW_ARCHS_LINUX: "${{ matrix.arch }}"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  windows_arm_build_wheels:
    name: Build wheel for ${{ matrix.py_ver }}-win_arm64
    runs-on: windows-latest
    strategy:
      matrix:
        py_ver: [cp311]

    env:
      CIBW_BUILD: ${{ matrix.py_ver }}-win_arm64

    steps:
      - uses: actions/checkout@v3

      - uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          # I guess this will go out of date...
          vcpkgGitCommitId: 'bdf073a835ebea07e1d039cd9cff4f650014e4ce'

      - name: Install OpenBLAS via vcpkg
        shell: bash
        run: |
            ls vcpkg/
            vcpkg install openblas:arm64-windows

      - name: Try to find OpenBLAS
        shell: bash
        run: |
            ls vcpkg/
            echo "now packages"
            ls vcpkg/packages/
            echo "now openblas"
            ls vcpkg/packages/openblas_arm64-windows/
            echo "now lib"
            ls vcpkg/packages/openblas_arm64-windows/lib/
            echo "now debug"
            ls vcpkg/packages/openblas_arm64-windows/debug/
            echo "now everything"
            find vcpkg/packages/openblas_arm64-windows/

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.11.2
        with:
          package-dir: mlpack/build/src/mlpack/bindings/python/
        env:
          CIBW_ARCHS_WINDOWS: "ARM64"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
