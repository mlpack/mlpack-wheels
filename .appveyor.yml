# This is based on the NumPy AppVeyor config for multibuild.  Thanks, NumPy
# maintainers!

environment:
  global:
      ARMADILLO_SRC: "https://sourceforge.net/projects/arma/files/armadillo-9.800.3.tar.xz"
      CYTHON_BUILD_DEP: Cython
      TEST_MODE: fast
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      WHEELHOUSE_UPLOADER_USERNAME: travis-worker
      WHEELHOUSE_UPLOADER_SECRET:
        secure:
            9s0gdDGnNnTt7hvyNpn0/ZzOMGPdwPp2SewFTfGzYk7uI+rdAN9rFq2D1gAP4NQh
      BUILD_COMMIT: 3.2.2

  matrix:
    - PYTHON: C:/Python36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32

    - PYTHON: C:/Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64

#    - PYTHON: C:/Python37
#      PYTHON_VERSION: 3.7
#      PYTHON_ARCH: 32

#    - PYTHON: C:/Python37-x64
#      PYTHON_VERSION: 3.7
#      PYTHON_ARCH: 64

#    - PYTHON: C:/Python38
#      PYTHON_VERSION: 3.8
#      PYTHON_ARCH: 32

#    - PYTHON: C:/Python38-x64
#      PYTHON_VERSION: 3.8
#      PYTHON_ARCH: 64

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  # TODO: I bet this can be removed because we only build for releases
  - ps: >-
      if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
        $env:CONTAINER = "pre-release"
        if ($env:DAILY_COMMIT) { $env:BUILD_COMMIT = $env:DAILY_COMMIT }
      } else {
        $env:CONTAINER = "wheels"
        $env:UPLOAD_ARGS = "--no-update-index"
      }

install:
  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "Installed SDKs:"
  - dir "C:/Program Files/Microsoft SDKs/Windows"

  # Get needed submodules
  - git submodule update --init

  # Install new Python if necessary
  - ps: ./multibuild/install_python.ps1

  # Prepend required Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%/Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"
  # Upgrade to the latest pip, setuptools, and wheel.
  - python -m pip install -U pip setuptools wheel

  # Install build requirements.
  - pip install "%CYTHON_BUILD_DEP%" --install-option="--no-cython-compile"
  - pip install numpy pandas

  # Download boost and OpenBLAS for Visual Studio.
  - ps: nuget install boost -o "${env:APPVEYOR_BUILD_FOLDER}" -Version 1.71.0
  - ps: nuget install boost-vc140 -o "${env:APPVEYOR_BUILD_FOLDER}" -Version 1.71.0
  - ps: nuget install OpenBLAS -o "${env:APPVEYOR_BUILD_FOLDER}"
  # Copy boost libraries out of strange directory structure.
  - mkdir link_libs
  - ps: cp "${env:APPVEYOR_BUILD_FOLDER}/boost_serialization-vc140.1.71.0.0/lib/native/*.*" link_libs/
  - ps: cp "${env:APPVEYOR_BUILD_FOLDER}/boost_program_options-vc140.1.71.0.0/lib/native/*.*" link_libs/
  - ps: cp "${env:APPVEYOR_BUILD_FOLDER}/boost_unit_test_framework-vc140.1.71.0.0/lib/native/*.*" link_libs/
  - ps: cp "${env:APPVEYOR_BUILD_FOLDER}/OpenBLAS.0.2.14.1/lib/native/lib/x64/*.*" link_libs/
  - cd link_libs/
  - dir
  - cd ..

build_script:
  # Build Armadillo.
  - >
    appveyor DownloadFile %ARMADILLO_SRC%
    -FileName armadillo.tar.xz
  - 7z x armadillo.tar.xz -so -txz | 7z x -si -ttar > nul
  - cd armadillo-9.800.3
  - mkdir build
  - cd build
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - >
    cmake
    -DBLAS_LIBRARY:FILEPATH=%APPVEYOR_BUILD_FOLDER%/link_libs/libopenblas.dll.a
    -DLAPACK_LIBRARY:FILEPATH=%APPVEYOR_BUILD_FOLDER%/link_libs/libopenblas.dll.a
    -DCMAKE_BUILD_TYPE=Release
    -DBUILD_SHARED_LIBS=OFF
    -G "Visual Studio 14 2015 Win64"
    ..
  - >
    MSBuild armadillo.sln /m /verbosity:quiet
    /p:Configuration=Release
  - cd Release
  - dir
  - cd ..
  - copy Release/armadillo.lib "%APPVEYOR_BUILD_FOLDER%/link_libs/"
  - cd ../..

  # Finally build mlpack.
  - cd mlpack
  - git checkout %BUILD_COMMIT%
  - mkdir build
  - cd build
  - >
    cmake
    -DDEBUG=OFF
    -DPROFILE=OFF
    -DBUILD_PYTHON_BINDINGS=ON
    -DBUILD_CLI_EXECUTABLES=OFF
    -DBUILD_TESTS=OFF
    -DBUILD_SHARED_LIBS=OFF
    -DPYTHON_EXECUTABLE=%PYTHON%/python.exe
    -DARMADILLO_INCLUDE_DIR=../../armadillo-9.800.3/include/
    -DARMADILLO_LIBRARY=%APPVEYOR_BUILD_FOLDER%/link_libs/armadillo.lib
    -DBOOST_INCLUDEDIR=%APPVEYOR_BUILD_FOLDER%/boost.1.71.0.0/lib/native/include/
    -DBOOST_LIBRARYDIR=%APPVEYOR_BUILD_FOLDER%/link_libs/
    -DBLAS_LIBRARY:FILEPATH=%APPVEYOR_BUILD_FOLDER%/link_libs/libopenblas.dll.a
    -DLAPACK_LIBRARY:FILEPATH=%APPVEYOR_BUILD_FOLDER%/link_libs/libopenblas.dll.a
    -DUSE_OPENMP=OFF
    -G "Visual Studio 14 2015 Win64"
    ../
  - >
    MSBuild mlpack.sln
    /m /verbosity:minimal /nologo /p:BuildInParallel=true
    /p:Configuration=Release

  - cd Release/
  - dir
  - cd ..
  - dir
  - cd src/mlpack/bindings/python/
  - dir
  - cd mlpack/
  - dir
  - cd ..
  - cd x64/
  - dir
  - cd ..
  - "SET PYTHONPATH=."
  - python -c "import sys; import mlpack; import numpy as np; x = np.random.rand(100, 10); o = mlpack.pca(input=x, new_dimensionality=5, verbose=True)"
  - python setup.py bdist_wheel

